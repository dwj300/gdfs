// Code generated by protoc-gen-go.
// source: blob_server.proto
// DO NOT EDIT!

/*
Package blob_server is a generated protocol buffer package.

It is generated from these files:
	blob_server.proto

It has these top-level messages:
	Filename
	Data
*/
package blob_server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Filename struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *Filename) Reset()                    { *m = Filename{} }
func (m *Filename) String() string            { return proto.CompactTextString(m) }
func (*Filename) ProtoMessage()               {}
func (*Filename) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Filename) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Filename)(nil), "blob_server.Filename")
	proto.RegisterType((*Data)(nil), "blob_server.Data")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Blobs service

type BlobsClient interface {
	GetBlob(ctx context.Context, in *Filename, opts ...grpc.CallOption) (*Data, error)
}

type blobsClient struct {
	cc *grpc.ClientConn
}

func NewBlobsClient(cc *grpc.ClientConn) BlobsClient {
	return &blobsClient{cc}
}

func (c *blobsClient) GetBlob(ctx context.Context, in *Filename, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := grpc.Invoke(ctx, "/blob_server.Blobs/GetBlob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Blobs service

type BlobsServer interface {
	GetBlob(context.Context, *Filename) (*Data, error)
}

func RegisterBlobsServer(s *grpc.Server, srv BlobsServer) {
	s.RegisterService(&_Blobs_serviceDesc, srv)
}

func _Blobs_GetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filename)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobsServer).GetBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blob_server.Blobs/GetBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobsServer).GetBlob(ctx, req.(*Filename))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blob_server.Blobs",
	HandlerType: (*BlobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlob",
			Handler:    _Blobs_GetBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blob_server.proto",
}

func init() { proto.RegisterFile("blob_server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xca, 0xc9, 0x4f,
	0x8a, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0x52, 0xe3, 0xe2, 0x70, 0xcb, 0xcc, 0x49, 0xcd, 0x4b, 0xcc, 0x4d, 0x15, 0x92, 0xe2,
	0xe2, 0x48, 0x83, 0xb2, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x25, 0x29, 0x2e,
	0x16, 0x97, 0xc4, 0x92, 0x44, 0x21, 0x21, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44, 0xb0, 0x3c, 0x4f,
	0x10, 0x98, 0x6d, 0x64, 0xc7, 0xc5, 0xea, 0x94, 0x93, 0x9f, 0x54, 0x2c, 0x64, 0xca, 0xc5, 0xee,
	0x9e, 0x5a, 0x02, 0x62, 0x0b, 0x89, 0xea, 0x21, 0x5b, 0x0c, 0xb3, 0x42, 0x4a, 0x10, 0x45, 0x18,
	0x64, 0xa2, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x5d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9,
	0x8c, 0xa4, 0xe3, 0xac, 0x00, 0x00, 0x00,
}
