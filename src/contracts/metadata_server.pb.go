// Code generated by protoc-gen-go.
// source: metadata_server.proto
// DO NOT EDIT!

/*
Package metadata_server is a generated protocol buffer package.

It is generated from these files:
	metadata_server.proto

It has these top-level messages:
	Empty
	Filename
	FilenameList
	Blob
	File
*/
package metadata_server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Filename struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *Filename) Reset()                    { *m = Filename{} }
func (m *Filename) String() string            { return proto.CompactTextString(m) }
func (*Filename) ProtoMessage()               {}
func (*Filename) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Filename) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type FilenameList struct {
	Filenames []*Filename `protobuf:"bytes,1,rep,name=filenames" json:"filenames,omitempty"`
}

func (m *FilenameList) Reset()                    { *m = FilenameList{} }
func (m *FilenameList) String() string            { return proto.CompactTextString(m) }
func (*FilenameList) ProtoMessage()               {}
func (*FilenameList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FilenameList) GetFilenames() []*Filename {
	if m != nil {
		return m.Filenames
	}
	return nil
}

type Blob struct {
	ServerId  string `protobuf:"bytes,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	BlobIndex string `protobuf:"bytes,2,opt,name=blob_index,json=blobIndex" json:"blob_index,omitempty"`
	Filename  string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
}

func (m *Blob) Reset()                    { *m = Blob{} }
func (m *Blob) String() string            { return proto.CompactTextString(m) }
func (*Blob) ProtoMessage()               {}
func (*Blob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Blob) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *Blob) GetBlobIndex() string {
	if m != nil {
		return m.BlobIndex
	}
	return ""
}

func (m *Blob) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type File struct {
	BlobList         []*Blob                    `protobuf:"bytes,1,rep,name=blob_list,json=blobList" json:"blob_list,omitempty"`
	CreationTime     *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	ModificationTime *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=modification_time,json=modificationTime" json:"modification_time,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *File) GetBlobList() []*Blob {
	if m != nil {
		return m.BlobList
	}
	return nil
}

func (m *File) GetCreationTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *File) GetModificationTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "metadata_server.Empty")
	proto.RegisterType((*Filename)(nil), "metadata_server.Filename")
	proto.RegisterType((*FilenameList)(nil), "metadata_server.FilenameList")
	proto.RegisterType((*Blob)(nil), "metadata_server.Blob")
	proto.RegisterType((*File)(nil), "metadata_server.File")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Blobs service

type BlobsClient interface {
	CreateFile(ctx context.Context, in *Filename, opts ...grpc.CallOption) (*Empty, error)
	ReadFile(ctx context.Context, in *Filename, opts ...grpc.CallOption) (*File, error)
	UpdateBlob(ctx context.Context, in *File, opts ...grpc.CallOption) (*Empty, error)
	DeleteFile(ctx context.Context, in *Filename, opts ...grpc.CallOption) (*Empty, error)
	ListFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FilenameList, error)
}

type blobsClient struct {
	cc *grpc.ClientConn
}

func NewBlobsClient(cc *grpc.ClientConn) BlobsClient {
	return &blobsClient{cc}
}

func (c *blobsClient) CreateFile(ctx context.Context, in *Filename, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metadata_server.Blobs/CreateFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobsClient) ReadFile(ctx context.Context, in *Filename, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := grpc.Invoke(ctx, "/metadata_server.Blobs/ReadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobsClient) UpdateBlob(ctx context.Context, in *File, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metadata_server.Blobs/UpdateBlob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobsClient) DeleteFile(ctx context.Context, in *Filename, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metadata_server.Blobs/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobsClient) ListFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FilenameList, error) {
	out := new(FilenameList)
	err := grpc.Invoke(ctx, "/metadata_server.Blobs/ListFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Blobs service

type BlobsServer interface {
	CreateFile(context.Context, *Filename) (*Empty, error)
	ReadFile(context.Context, *Filename) (*File, error)
	UpdateBlob(context.Context, *File) (*Empty, error)
	DeleteFile(context.Context, *Filename) (*Empty, error)
	ListFiles(context.Context, *Empty) (*FilenameList, error)
}

func RegisterBlobsServer(s *grpc.Server, srv BlobsServer) {
	s.RegisterService(&_Blobs_serviceDesc, srv)
}

func _Blobs_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filename)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobsServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata_server.Blobs/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobsServer).CreateFile(ctx, req.(*Filename))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blobs_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filename)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobsServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata_server.Blobs/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobsServer).ReadFile(ctx, req.(*Filename))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blobs_UpdateBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobsServer).UpdateBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata_server.Blobs/UpdateBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobsServer).UpdateBlob(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blobs_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filename)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobsServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata_server.Blobs/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobsServer).DeleteFile(ctx, req.(*Filename))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blobs_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobsServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata_server.Blobs/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobsServer).ListFiles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadata_server.Blobs",
	HandlerType: (*BlobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFile",
			Handler:    _Blobs_CreateFile_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _Blobs_ReadFile_Handler,
		},
		{
			MethodName: "UpdateBlob",
			Handler:    _Blobs_UpdateBlob_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Blobs_DeleteFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Blobs_ListFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata_server.proto",
}

func init() { proto.RegisterFile("metadata_server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x14, 0xa4, 0x7c, 0x68, 0xfb, 0xc0, 0xa8, 0x9b, 0x60, 0xb0, 0x86, 0x48, 0x7a, 0x30, 0x9c, 0x4a,
	0x52, 0x0f, 0x9e, 0xd4, 0xa0, 0x28, 0x21, 0xf1, 0xd4, 0xe8, 0xd5, 0x66, 0x4b, 0x1f, 0x64, 0x93,
	0x96, 0x6d, 0xda, 0xd5, 0xe8, 0xff, 0xf3, 0x17, 0xf8, 0x8b, 0xcc, 0x6e, 0x59, 0x45, 0x3e, 0xe4,
	0xe0, 0xad, 0x9d, 0x37, 0xf3, 0x66, 0x76, 0x1e, 0x34, 0x13, 0x14, 0x34, 0xa2, 0x82, 0x06, 0x39,
	0x66, 0xaf, 0x98, 0xb9, 0x69, 0xc6, 0x05, 0x27, 0xfb, 0x4b, 0xb0, 0x7d, 0x3a, 0xe5, 0x7c, 0x1a,
	0x63, 0x4f, 0x8d, 0xc3, 0x97, 0x49, 0x4f, 0xb0, 0x04, 0x73, 0x41, 0x93, 0xb4, 0x50, 0x38, 0xbb,
	0x50, 0xbb, 0x4b, 0x52, 0xf1, 0xee, 0x9c, 0x81, 0x79, 0xcf, 0x62, 0x9c, 0xd1, 0x04, 0x89, 0x0d,
	0xe6, 0x64, 0xfe, 0xdd, 0x32, 0x3a, 0x46, 0xd7, 0xf2, 0xbf, 0xff, 0x9d, 0x21, 0x34, 0x34, 0xef,
	0x81, 0xe5, 0x82, 0x5c, 0x80, 0xa5, 0x67, 0x79, 0xcb, 0xe8, 0x54, 0xba, 0x75, 0xef, 0xd8, 0x5d,
	0x4e, 0xa7, 0x15, 0xfe, 0x0f, 0xd7, 0x79, 0x86, 0xea, 0x4d, 0xcc, 0x43, 0x72, 0x02, 0x56, 0xc1,
	0x0a, 0x58, 0xa4, 0xdd, 0x0a, 0x60, 0x14, 0x91, 0x36, 0x40, 0x18, 0xf3, 0x30, 0x60, 0xb3, 0x08,
	0xdf, 0x5a, 0x65, 0x35, 0xb5, 0x24, 0x32, 0x92, 0xc0, 0xaf, 0xa0, 0x95, 0xa5, 0xa0, 0x1f, 0x06,
	0x54, 0xa5, 0x2f, 0xf1, 0x40, 0x29, 0x82, 0x98, 0xe5, 0x62, 0x9e, 0xb0, 0xb9, 0x92, 0x50, 0x46,
	0xf1, 0x4d, 0xc9, 0x53, 0xaf, 0xba, 0x86, 0xbd, 0x71, 0x86, 0x54, 0x30, 0x3e, 0x0b, 0x64, 0x65,
	0xca, 0xba, 0xee, 0xd9, 0x6e, 0xd1, 0xa7, 0xab, 0xfb, 0x74, 0x1f, 0x75, 0x9f, 0x7e, 0x43, 0x0b,
	0x24, 0x44, 0x86, 0x70, 0x98, 0xf0, 0x88, 0x4d, 0xd8, 0x78, 0x61, 0x49, 0x65, 0xeb, 0x92, 0x83,
	0x45, 0x91, 0x84, 0xbd, 0xcf, 0x32, 0xd4, 0x64, 0xb8, 0x9c, 0xf4, 0x01, 0x6e, 0xa5, 0x05, 0xaa,
	0x57, 0x6d, 0x2e, 0xd9, 0x3e, 0x5a, 0x19, 0x15, 0x27, 0x2e, 0x91, 0x2b, 0x30, 0x7d, 0xa4, 0xd1,
	0xb6, 0x05, 0xcd, 0xb5, 0x23, 0xa7, 0x44, 0x2e, 0x01, 0x9e, 0xd2, 0x88, 0x0a, 0x54, 0x97, 0x5b,
	0x4f, 0xfb, 0xc3, 0xbe, 0x0f, 0x30, 0xc0, 0x18, 0xff, 0xf3, 0x82, 0x01, 0x58, 0xf2, 0x40, 0x92,
	0x99, 0x93, 0x0d, 0x34, 0xbb, 0xbd, 0x71, 0xb3, 0xd4, 0x3a, 0xa5, 0x70, 0x47, 0x55, 0x7f, 0xfe,
	0x15, 0x00, 0x00, 0xff, 0xff, 0x35, 0x7c, 0xb8, 0x86, 0x47, 0x03, 0x00, 0x00,
}
